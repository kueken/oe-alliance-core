--- a/daemons/hw_default.c
+++ b/daemons/hw_default.c
@@ -13,6 +13,8 @@
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif
+
+#include <sys/sysmacros.h>
 
 #include <stdio.h>
 #include <stdlib.h>
--- a/daemons/transmit.c
+++ b/daemons/transmit.c
@@ -42,7 +42,7 @@
 	memset(&send_buffer, 0, sizeof(send_buffer));
 }
 
-inline void clear_send_buffer(void)
+static void clear_send_buffer(void)
 {
 	LOGPRINTF(3, "clearing transmit buffer");
 	send_buffer.wptr = 0;
@@ -53,7 +53,7 @@
 	send_buffer.sum = 0;
 }
 
-inline void add_send_buffer(lirc_t data)
+static void add_send_buffer(lirc_t data)
 {
 	if (send_buffer.wptr < WBUF_SIZE) {
 		LOGPRINTF(3, "adding to transmit buffer: %u", data);
@@ -65,7 +65,7 @@
 	}
 }
 
-inline void send_pulse(lirc_t data)
+static void send_pulse(lirc_t data)
 {
 	if (send_buffer.pendingp > 0) {
 		send_buffer.pendingp += data;
@@ -78,7 +78,7 @@
 	}
 }
 
-inline void send_space(lirc_t data)
+static void send_space(lirc_t data)
 {
 	if (send_buffer.wptr == 0 && send_buffer.pendingp == 0) {
 		LOGPRINTF(1, "first signal is a space!");
@@ -95,7 +95,7 @@
 	}
 }
 
-static inline int bad_send_buffer(void)
+static int bad_send_buffer(void)
 {
 	if (send_buffer.too_long != 0)
 		return (1);
@@ -127,7 +127,7 @@
 	return 1;
 }
 
-static inline void flush_send_buffer(void)
+static void flush_send_buffer(void)
 {
 	if (send_buffer.pendingp > 0) {
 		add_send_buffer(send_buffer.pendingp);
@@ -139,7 +139,7 @@
 	}
 }
 
-static inline void sync_send_buffer(void)
+static void sync_send_buffer(void)
 {
 	if (send_buffer.pendingp > 0) {
 		add_send_buffer(send_buffer.pendingp);
@@ -149,7 +149,7 @@
 		send_buffer.wptr--;
 }
 
-inline void send_header(struct ir_remote *remote)
+static void send_header(struct ir_remote* remote)
 {
 	if (has_header(remote)) {
 		send_pulse(remote->phead);
@@ -157,7 +157,7 @@
 	}
 }
 
-inline void send_foot(struct ir_remote *remote)
+static void send_foot(struct ir_remote* remote)
 {
 	if (has_foot(remote)) {
 		send_space(remote->sfoot);
@@ -165,7 +165,7 @@
 	}
 }
 
-inline void send_lead(struct ir_remote *remote)
+static void send_lead(struct ir_remote* remote)
 {
 	if (remote->plead != 0) {
 		send_pulse(remote->plead);
@@ -179,7 +179,7 @@
 	}
 }
 
-inline void send_data(struct ir_remote *remote, ir_code data, int bits, int done)
+static void send_data(struct ir_remote* remote, ir_code data, int bits, int done)
 {
 	int i;
 	int all_bits = bit_count(remote);
@@ -283,7 +283,7 @@
 	}
 }
 
-inline void send_pre(struct ir_remote *remote)
+static void send_pre(struct ir_remote* remote)
 {
 	if (has_pre(remote)) {
 		send_data(remote, remote->pre_data, remote->pre_data_bits, 0);
@@ -294,7 +294,7 @@
 	}
 }
 
-inline void send_post(struct ir_remote *remote)
+static void send_post(struct ir_remote* remote)
 {
 	if (has_post(remote)) {
 		if (remote->post_p > 0 && remote->post_s > 0) {
@@ -305,7 +305,7 @@
 	}
 }
 
-inline void send_repeat(struct ir_remote *remote)
+static void send_repeat(struct ir_remote* remote)
 {
 	send_lead(remote);
 	send_pulse(remote->prepeat);
@@ -313,7 +313,7 @@
 	send_trail(remote);
 }
 
-inline void send_code(struct ir_remote *remote, ir_code code, int repeat)
+static void send_code(struct ir_remote* remote, ir_code code, int repeat)
 {
 	if (!repeat || !(remote->flags & NO_HEAD_REP))
 		send_header(remote);

